<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
  <display-name>Archetype Created Web Application</display-name>

  <!-- 启动页面 -->
  <welcome-file-list>
    <welcome-file>/WEB-INF/jsp/login.jsp</welcome-file>
  </welcome-file-list>

  <!-- Bootstraps the root web application context before servlet initialization -->
  <!--监听器：启动Web容器时，自动装配ApplicationContext.xml的配置信息-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--1、启动Spring的容器  -->
  <!-- needed for ContextLoaderListener -->
  <!--加载spring配置文件-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>

  <!--2、Springmvc的前端控制器，拦截所有请求  -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--加载springmvc.xml配置文件-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springmvc.xml</param-value>
    </init-param>
    <!--1)load-on-startup元素标记容器是否在启动的时候就加载这个servlet(实例化并调用其init()方法)。
        2)它的值必须是一个整数，表示servlet应该被载入的顺序
        3)当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet；
        4)当值小于0或者没有指定时，则表示容器在该servlet被选择时才会去加载。
        5)正数的值越小，该servlet的优先级越高，应用启动时就越先加载。
        6)当值相同时，容器就会自己选择顺序来加载。-->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <!--仅支持/TEST,/MAIN等格式，不支持.jsp,.do等格式-->
    <servlet-name>springmvc</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!-- 3、字符编码过滤器，一定要放在所有过滤器之前，把所有类型的url转为UTF-8编码 -->
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <!--支持/TEST,/MAIN等格式，也支持.jsp,.do等格式-->
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- 4、使用Rest风格的URI，将页面普通的post请求转为指定的delete或者put请求 -->
  <!--针对CRUD,浏览器只支持Post和get的方式，想要实现delete和put的方式，需要使用过滤器HiddenHttpMethodFilter-->
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <!--支持/TEST,/MAIN等格式，也支持.jsp,.do等格式-->
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--HttpPutFormContentFilter：将请求体中的数据解析包装成一个map -->
  <!--获取put表单的参数-值，并将之传递到Controller中标注了method为RequestMethod.put的方法中。-->
  <filter>
    <filter-name>HttpPutFormContentFilter</filter-name>
    <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HttpPutFormContentFilter</filter-name>
    <!--支持/TEST,/MAIN等格式，也支持.jsp,.do等格式-->
    <url-pattern>/*</url-pattern>
  </filter-mapping>

</web-app>
